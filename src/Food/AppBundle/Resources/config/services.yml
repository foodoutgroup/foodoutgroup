services:

    request_listener:
        class: Food\AppBundle\EventListener\RequestListener
        arguments: [ @service_container ]
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }
            - { name: kernel.event_listener, event: kernel.request, method: onLateKernelRequest, priority: -10 }

    gedmo.listener.translatable:
        class: Gedmo\Translatable\TranslatableListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ @annotation_reader ] ]
            - [ setDefaultLocale, [ %locale% ] ]
            - [ setTranslationFallback, [ true ] ]

    slug:
        class: Food\AppBundle\Service\SlugService
        arguments: ["@doctrine.orm.entity_manager", @service_container, @router, %available_locales%, %kernel.default_locale%]

    validate.slug:
        class: Food\AppBundle\Validator\Constraints\SlugValidator
        arguments: [@doctrine.orm.entity_manager, %available_locales%, %kernel.default_locale%, %slug_regex%]
        tags:
          - { name: validator.constraint_validator, alias: validate.slug }

    food.app.utils.language:
        class: Food\AppBundle\Utils\Language
        calls:
            - [container, [@service_container]]
        arguments: [@service_container]

    food.app.utils.notifications:
        class: Food\AppBundle\Utils\Notifications
        calls:
            - [container, [@service_container]]

    food.app.utils.misc:
        class: Food\AppBundle\Utils\Misc
        calls:
            - [container, [@service_container]]

    food.app.utils.route:
        class: Food\AppBundle\Utils\Route
        calls:
            - [container, [@service_container]]

    food.static:
        class: Food\AppBundle\Service\StaticService
        arguments: [@service_container, user_id]

    food.newsletter:
        class: Food\AppBundle\Service\NewsletterService
        arguments: [@service_container]

    food.arcgis:
        class: Food\AppBundle\Service\ArcGisService
        calls:
            - [setContainer, [@service_container]]

    food.googlegis:
        class: Food\AppBundle\Service\GoogleGisService
        calls:
            - [setContainer, [@service_container]]

    food.location:
        class: Food\AppBundle\Service\LocationService
        calls:
            - [setContainer, [@service_container]]

    food.mail:
        class: Food\AppBundle\Service\MailService
        calls:
           - [setContainer, [@service_container]]

    food.mailer:
        class: Food\AppBundle\Service\MailerMessagesService
        arguments: [%mailer_api_key%]

    food.simple_mailer:
        class: Food\AppBundle\Service\SimpleMailerService
        calls:
            - [setMailer, [@mailer]]
            - [setTransport, [@swiftmailer.transport.real]]

    food.reset_password:
        class: Food\AppBundle\Utils\ResetPassword
        calls:
            - [setContainer, [@service_container]]

    food.google_analytics:
        class: Food\AppBundle\Service\GoogleAnalyticsService
        calls:
            - [setServiceAccountName, ["%google.analytics.service_account_name%"]]
            - [setPrivateKey, ["%google.analytics.base64_private_key%"]]
            - [setScopes, ["%google.analytics.scopes%"]]
            - [setViewId, ["%google.analytics.view_id%"]]

    food.base_service:
      class: Food\AppBundle\Service\BaseService
      arguments:
        - @doctrine.orm.entity_manager

    food.driver_service:
      class: Food\AppBundle\Service\DriverService
      parent: food.base_service

    food.city_service:
        class: Food\AppBundle\Service\CityService
        parent: food.base_service
        arguments:
          - @router
          - @food.app.utils.language
          - @service_container
        calls:
          - [setAvailableCitiesSlugs, [%available_cities_slugs%]]
          - [setLocale, [%locale%]]
    food.page_service:
        class: Food\AppBundle\Service\PageService
        arguments:
          - @doctrine.orm.entity_manager
          - @router
    1:
        class: Food\AppBundle\Service\HookFreeDeliveryRestaurant
        arguments: ["@templating", "@doctrine.orm.entity_manager"]

    hook.best_offer:
        class: Food\AppBundle\Service\HookBestOffer
        arguments: ["@templating", "@doctrine.orm.entity_manager"]

    hook.b2b_client:
        class: Food\AppBundle\Service\HookB2BClient
        arguments: ['@service_container']

    hook.application:
        class: Food\AppBundle\Service\HookApplication

    hook.meet:
        class: Food\AppBundle\Service\HookMeet

    hook.sitemap:
        class: Food\AppBundle\Service\HookSitemap
        arguments: ['@templating', '@doctrine.orm.entity_manager', '@service_container']

    food.zavalas_service:
      class: Food\AppBundle\Service\ZavalasService
      parent: food.base_service
      arguments:
        - @food.app.utils.misc
        - @translator.default
        - @food.location
        - @food.places

    sonata.admin.cities:
      class: Food\AppBundle\Admin\CityAdmin
      tags:
        - { name: sonata.admin, manager_type: orm, group: "Content", label: "admin.cities" }
      arguments:
        - ~
        - Food\AppBundle\Entity\City
        - ~
      calls:
        - [ setTranslationDomain, [SonataAdminBundle]]

    sonata.admin.citieslog:
      class: Food\AppBundle\Admin\CityLogAdmin
      tags:
        - { name: sonata.admin, manager_type: orm, group: "Content", label: "admin.citieslog" }
      arguments:
        - ~
        - Food\AppBundle\Entity\CityLog
        - ~
      calls:
        - [ setTranslationDomain, [SonataAdminBundle]]

    sonata.admin.banned_email:
      class: Food\AppBundle\Admin\BannedEmailAdmin
      tags:
        - { name: sonata.admin, manager_type: orm, group: "Content", label: "admin.banned_email" }
      arguments:
        - ~
        - Food\AppBundle\Entity\BannedEmail
        - ~
      calls:
        - [ setTranslationDomain, [SonataAdminBundle]]

    sonata.admin.call_log:
      class: Food\AppBundle\Admin\CallLogAdmin
      tags:
        - { name: sonata.admin, manager_type: orm, group: "Content", label: "admin.call_log" }
      arguments:
        - ~
        - Food\AppBundle\Entity\CallLog
        - ~
      calls:
        - [ setTranslationDomain, [SonataAdminBundle]]

    food.dispatcher_service:
      class: Food\AppBundle\Service\DispatcherService
      parent: food.base_service
      calls:
        - [ setSecurityContext, [@security.context]]
    app.form.type.gender:
        class: Food\AppBundle\Form\Type\CityType
        arguments:
            - '%available_cities%'
        tags:
            - { name: form.type, alias: app_city }
    app.form.type.offer:

        class: Food\AppBundle\Form\Type\BestOfferType
        arguments:
            - '%available_cities%'
        tags:
            - { name: form.type, alias: offer_city }