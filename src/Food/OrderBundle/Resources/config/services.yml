services:
    food.paysera_biller:
        class: Food\OrderBundle\Service\PaySera
        calls:
            - [setProjectId, [%evp_web_to_pay.credentials.project_id%]]
            - [setSightPassword, [%evp_web_to_pay.credentials.sign_password%]]
            - [setContainer, ["@service_container"]]
            - [setTest, [%evp.test_payments%]]
            - [setSiteDomain, [%domain%]]

    food.local_biller:
        class: Food\OrderBundle\Service\LocalBiller
        calls:
            - [setContainer, ["@service_container"]]

    food.swedbank_gateway_biller:
        class: Food\OrderBundle\Service\SwedbankGatewayBiller
        calls:
            - [setContainer, ["@service_container"]]

    food.swedbank_credit_card_gateway_biller:
        class: Food\OrderBundle\Service\SwedbankCreditCardGatewayBiller
        calls:
            - [setContainer, ["@service_container"]]

    food.seb_banklink_biller:
        class: Food\OrderBundle\Service\SebBanklinkBiller
        calls:
            - [setContainer, [@service_container]]

    food.nordea_banklink_biller:
        class: Food\OrderBundle\Service\NordeaBanklinkBiller
        calls:
            - [setContainer, [@service_container]]

    food.seb_banklink:
        class: Food\OrderBundle\Service\Banklink\Seb
        arguments: ["%seb.banklink.private_key%", "%seb.banklink.bank_key%"]

    food.nordea_banklink:
        class: Food\OrderBundle\Service\Banklink\Nordea
        arguments: ["%nordea.banklink.mac%", @router, @form.factory]

    food.order:
        class: Food\OrderBundle\Service\OrderService
        arguments: []
        calls:
            - [setCartService, ["@food.cart"]]
            - [setContainer, ["@service_container"]]
            - [setContext, ["@security.context"]]
            - [setPayseraBiller, [@food.paysera_biller]]
            - [setLocalBiller, [@food.local_biller]]

    food.invoice:
        class: Food\OrderBundle\Service\InvoiceService
        arguments: []
        calls:
            - [setContainer, ["@service_container"]]

    food.accounting:
        class: Food\OrderBundle\Service\AccountingService
        arguments: []
        calls:
            - [setContainer, ["@service_container"]]

    food.nav:
        class: Food\OrderBundle\Service\NavService
        arguments: []
        calls:
            - [setContainer, ["@service_container"]]

    food.mssql:
        class: Food\OrderBundle\Service\SqlConnectorService
        arguments: []
        calls:
            - [setContainer, ["@service_container"]]



    food.logistics:
        class: Food\OrderBundle\Service\LogisticsService
        arguments: []
        calls:
            - [setContainer, ["@service_container"]]
            - [setLogisticSystem, [%active_logistics%]]
            - [setOrderService, ["@food.order"]]

    food.daily_report:
        class: Food\OrderBundle\Service\DailyReport
        calls:
            - [setConnection, ["@doctrine.dbal.default_connection"]]
            - [setDailyReportEmails, ["%daily_report_emails%"]]
            - [setGoogleAnalyticsService, ["@food.google_analytics"]]
            - [setTemplating, ["@templating"]]
            - [setParameters, ["@service_container"]]
            - [setContainer, ["@service_container"]]

    food.weekly_report:
        class: Food\OrderBundle\Service\WeeklyReport
        calls:
            - [setConnection, ["@doctrine.dbal.default_connection"]]
            - [setWeeklyReportEmails, ["%weekly_report_emails%"]]
            - [setGoogleAnalyticsService, ["@food.google_analytics"]]
            - [setTemplating, ["@templating"]]
            - [setParameters, ["@service_container"]]
            - [setContainer, ["@service_container"]]

    # this is not part of gateway-bundle. it is part of main app.
    # we simply register banklink event listener that handles third party
    # loggin of banklink activity.
    food.banklink_listener:
        class: Food\OrderBundle\Service\BanklinkListener
        calls:
            - [setContainer, [@service_container]]
        tags:
            - { name: kernel.event_listener, event: banklink.request, method: onBanklinkRequest }
            - { name: kernel.event_listener, event: banklink.response, method: onBanklinkResponse }

    food.nav.sync_listener:
        class: Food\OrderBundle\Service\NavOrderSyncListener
        calls:
            - [setContainer, [@service_container]]
        tags:
            - { name: kernel.event_listener, event: nav.order.mark_for_sync, method: onMarkForSync }

    # Soap fault handler. Non-mandatory, you can disable this if you hate critical log messages about soap faults
    food.soap.fault_listener:
        class: Food\OrderBundle\Service\SoapFaultListener
        calls:
            - [setContainer, [@service_container]]
        tags:
            - { name: kernel.event_listener, event: food.soap.fault, method: onSoapFault }

    food.order_data_import_service:
      class: Food\OrderBundle\Service\OrderDataImportService
      parent: food.base_service
      arguments:
        - @security.context
        - @validator
